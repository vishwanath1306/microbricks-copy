receivers:
  jaeger:
    protocols:
      thrift_compact:
        endpoint: 0.0.0.0:6832
  # add more receivers for more servers
  jaeger/2:
    protocols:
      thrift_compact:
        endpoint: 0.0.0.0:6833
  jaeger/3:
    protocols:
      thrift_compact:
        endpoint: 0.0.0.0:6834
  jaeger/4:
    protocols:
      thrift_compact:
        endpoint: 0.0.0.0:6835

processors:
  # batch:
  # memory_limiter:
  #   check_interval: 5s
  #   limit_mib: 4000
  #   spike_limit_mib: 500
  # probabilistic_sampler:
  #   hash_seed: 22
  #   sampling_percentage: 15

  # https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/1797
  # decouple the tail based sampling into span grouping and the real policy
  # seems still in progress
  # groupbytrace:
  #   wait_duration: 10s
  #   num_traces: 1000
  # sample by latency, status code, or more
  # followed by a probabilistic sampler
  # probabilistic_sampler:
  #   hash_seed: 42
  #   sampling_percentage: 10

  tail_sampling:
    # same as event horizon in Hindsight paper
    decision_wait: 10s
    num_traces: 10000000
    # expected_new_traces_per_sec: 10
    policies: [
        # current implementation is OR combination
        # the trace will get sampled if any policy is triggered
        # { name: always_sample, type: always_sample },
        # { name: latency, type: latency, latency: { threshold_ms: 100 } },
        {
          name: probabilistic,
          type: probabilistic,
          probabilistic: { sampling_percentage: 0.1 },
        },
        # {
        #   name: status_code,
        #   type: status_code,
        #   status_code: { status_codes: [ERROR, UNSET] },
        # },
        # {
        #   # this one is not well defined
        #   name: rate_limiting,
        #   type: rate_limiting,
        #   rate_limiting: { spans_per_second: 35 },
        # },
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/6910
    # AND policy will be merged soon, will keep an eye on the progress
    # the trace will get sampled if all policies are triggered
      ]

exporters:
  file:
    path: ./gateway.json

  logging:
    loglevel: info
    # number of messages initially logged each second.
    sampling_initial: 5
    # sampling rate after the initial messages are logged (every Mth message is logged)
    sampling_thereafter: 5

  jaeger_thrift:
    endpoint: localhost:6900

# extensions:
#   health_check:
#   pprof:
#   zpages:
#   memory_ballast:
#     size_mib: 512

service:
  # extensions: [pprof, zpages, health_check]
  pipelines:
    # Data sources: traces, metrics

    traces:
      receivers: [jaeger, jaeger/2, jaeger/3, jaeger/4]
      processors: [tail_sampling]
      exporters: [file, logging] #, jaeger]

    # metrics:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [logging, prometheus]